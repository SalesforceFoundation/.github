name: SFDO Codeowners Review Workflows
on:
  pull_request:
    types:
      - labeled
      - review_requested

env:
  CODEOWNERS_TEAM: 'release-engineering-reviewers'
  READY_FOR_REVIEW_COMMENT: |
    This PR has been labeled as ready for Release Engineering review by
  CODEOWNERS_COMMENT: |
    We ask that teams use the following process for routine reviews:

    1. After creating a non-draft pull request that includes automation updates,
       a release engineer will be auto-assigned to the PR.
    2. When dev review is complete and the PR is ready for the release engineer
       to review, add a "ready for RE review" label to the PR to let us know when
       the PR is ready for us to review.
    3. If you've added the "ready for RE review" label but haven't received a
       review within a 36 hours, @-mention the assigned RE in a comment on the PR.
    4. If you don't receive a response from the assigned RE by the end of the
       next business day (or your request is urgent), post a message to
       #sfdo-releng-support that includes a link to this PR and one of us will
       review as soon as we're able.

jobs:
  codeowners_workflow_comments:
    runs-on: ubuntu-latest
    steps:
      - name: Query for reviewers
        id: codeowners-team-members
        uses: SalesforceFoundation/github-script@v4
        with:
          script: |
            const review_team = process.env.CODEOWNERS_TEAM;

            const query = `query ($org: String!, $slug: String!) {
              organization(login: $org) {
                team(slug: $slug) {
                  members {
                    nodes {
                      login
                    }
                  }
                }
              }
            }`;

            const variables = {
              org: context.repo.owner,
              slug: process.env.CODEOWNERS_TEAM
            }

            const result = await github.graphql(query, variables)
            review_team_members = result.organization.team.members.nodes
              .map((_) => _.login)
            return review_team_members
      - name: CODEOWNERS Review Requested
        id: codeowners-comment
        if: github.event.action == 'review_requested' &&
            github.event.requested_team.slug == env.CODEOWNERS_team ||
            contains(fromJSON(steps.codeowners-team-members.result), github.event.requested_reviewer.login)
        uses: SalesforceFoundation/github-script@v4
        with:
          script: |
            const comment_body = process.env.CODEOWNERS_COMMENT

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸ‘‹ @${context.payload.pull_request.user.login}${comment_body}`
            })
      - name: Labeled ready for CODEOWNERS Review
        id: codeowners-labeled-ready
        if: github.event.action == 'labeled' && contains(github.event.pull_request.labels.*.name, 'ready for RE review')
        uses: SalesforceFoundation/github-script@v4
        with:
          script: |
            const comment_body = process.env.READY_FOR_REVIEW_COMMENT:
            let mention_text = '';

            let team_reviewers = ${{ fromJSON(steps.codeowners-team-members.result) }}
            let requested_team_reviewers = github.event.pull_request.requested_reviewers
              .map((_) => _.login)
              .filter((login) => team_reviewers.includes(login))

            if (requested_team_reviewers.length >= 1) {
              github.issues.addAssignees({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                assignees: requested_team_reviewers,
              });

              let reviewer_mentions = team_reviewers
                .map((login) => `@${login}`)
                .join(', ');
                mention_text = `Reviews have been requested from: @${reviewer_mentions}.`
            }

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `${comment_body} @${context.payload.sender.login} ${mention_text}`,
            });
